// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  email             String  @unique
  password          String
  phone             String?
  firstName         String
  middleName        String?
  lastName          String
  preferredLanguage String? @default("en")
  role              Role?   @default(CUSTOMER)

  // Relations
  address Address[] // @relation(name: "Address_user")
  cart    Cart? // @relation(name: "Cart_user")
  orders  Order[] // @relation(name: "Order_user")
  profile Profile? // @relation(name: "Profile_user")

  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  gender         Gender?
  productReviews Review[]
  username       String? // A default will be generated by extracting user name from email with random numbers 

  // Relations
  user                User?   @relation(fields: [userId], references: [id])
  userId              String? @unique
  avatar              Avatar? @relation(name: "Profile_avatar", fields: [avatarId], references: [id])
  avatarId            String? @unique
  from_Avatar_profile Avatar? @relation(name: "Avatar_profile")

  @@map("profiles")
}

model Address {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  addressLine1 String
  addressLine2 String?
  municipality String
  region       String
  country      String
  postalCode   String

  isBillingAddress  Boolean?
  isPrimaryAddress  Boolean?
  isShippingAddress Boolean?
  isValidAddress    Boolean?
  poBox             Boolean?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("addresses")
}

enum ContactType {
  PHONE
  EMAIL
  TEXT
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  code        String?
  description Json?   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  name        String
  path        String /// URI path

  // Relations
  parent                Category?  @relation(name: "Category_parent", fields: [parentId], references: [id])
  parentId              String?
  from_Category_parent  Category[] @relation(name: "Category_parent")
  products              Product[]  @relation(name: "Category_products")
  from_Product_category Product[]  @relation(name: "Product_categories")

  @@unique([name, parentId])
  @@map("categories")
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products CartProduct[] @relation(name: "Cart_products")
  user     User          @relation(fields: [userId], references: [id])
  userId   String        @unique

  @@map("cart")
}

model CartProduct {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  amount Int @default(0)

  // Relations
  product            Product? @relation(name: "CartProduct_product", fields: [productId], references: [id])
  productId          String?
  from_Cart_products Cart[]   @relation(name: "Cart_products")

  @@unique([productId])
  @@map("cart_products")
}

model Avatar {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  altText  String?
  resource Json

  // Relations
  profile             Profile?  @relation(name: "Avatar_profile", fields: [profileId], references: [id])
  profileId           String?
  from_Profile_avatar Profile[] @relation(name: "Profile_avatar")

  @@unique([profileId])
  @@map("avatars")
}

enum OrderStatusType {
  CREATED
  PENDING
  SUCCESSFUL
  CANCELLED
}

model Order {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  products OrderDetail[]
  status   OrderStatusType?

  // Relations
  payment    Payment?  @relation(name: "Order_payment", fields: [paymentId], references: [id])
  paymentId  String?
  shipment   Shipment? @relation(name: "Order_shipment", fields: [shipmentId], references: [id])
  shipmentId String?
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?

  from_Payment_order  Payment[]  @relation(name: "Payment_order")
  from_Shipment_order Shipment[] @relation(name: "Shipment_order")

  @@unique([paymentId, shipmentId, userId])
  @@map("orders")
}

model OrderDetail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quantity Int   @default(0)
  total    Float

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([orderId, productId])
  @@map("order_details")
}

enum PaymentStatusType {
  CREATED
  PENDING
  COMPLETED
}

model Payment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  paymentMethod String
  status        PaymentStatusType?

  // Relations
  order   Order?  @relation(name: "Payment_order", fields: [orderId], references: [id])
  orderId String?

  from_Order_payment Order[] @relation(name: "Order_payment")

  @@unique([orderId])
  @@map("payments")
}

model Price {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  isoCurrencyCode String?  @default("USD")
  currentPrice    Int
  discounted      Boolean?
  formattedValue  String
  fullPrice       Int

  product            Product?  @relation(name: "Price_product", fields: [productId], references: [id])
  productId          String?
  from_Product_price Product[] @relation(name: "Product_price")

  @@unique([productId])
  @@map("prices")
}

enum ImageFormat {
  LANDSCAPE
  PORTRAIT
  SQUARE
}

model ProductImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  altText  String?
  resource Json
  format   ImageFormat?

  // Relations
  variant             ProductVariant? @relation(fields: [variantId], references: [id])
  variantId           String?
  from_Product_images Product[]       @relation(name: "Product_images")

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  code   String? // allows concatenating of categories and ids
  name   String
  hex    String?
  swatch Json? // { "src": "https://...", "width": 80, "height": 55, "alt": "red" }
  uid    String?

  // Relations
  product               Product?       @relation(name: "ProductVariant_product", fields: [productId], references: [id])
  productId             String?
  images                ProductImage[] // @relation(name: "ProductVariant_images")
  from_Product_variants Product[]      @relation(name: "Product_variants")

  @@unique([name, productId])
  @@map("product_variants")
}

enum ProductStatusType {
  AVAILABLE
  BACKORDER
  DISCONTINUED
  OUT_OF_STOCK
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  brand       String
  code        String? // allows concatenating of categories and ids
  description Json              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  name        String
  rating      Float?            @default(0)
  userReviews Review[]
  status      ProductStatusType
  sku         String            @unique

  // Relations
  categories Category[]       @relation(name: "Product_categories")
  images     ProductImage[]   @relation(name: "Product_images")
  orders     OrderDetail[]
  price      Price?           @relation(name: "Product_price", fields: [priceId], references: [id])
  priceId    String?          @unique
  stock      Stock?           @relation(name: "Product_stock", fields: [stockId], references: [id])
  stockId    String?          @unique
  variants   ProductVariant[] @relation(name: "Product_variants")

  from_Category_product       Category[]       @relation(name: "Category_products")
  from_CartProduct_product    CartProduct[]    @relation(name: "CartProduct_product")
  from_Price_product          Price[]          @relation(name: "Price_product")
  from_ProductVariant_product ProductVariant[] @relation(name: "ProductVariant_product")
  from_Stock_product          Stock?           @relation(name: "Stock_product")

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  label   String
  rating  Int
  comment String?

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  @@unique([productId, profileId])
  @@map("reviews")
}

model Stock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quantity             Int?
  nextDelivery         DateTime?
  nextDeliveryQuantity Int?

  product            Product?  @relation(name: "Stock_product", fields: [productId], references: [id])
  productId          String?
  from_Product_stock Product[] @relation(name: "Product_stock")

  @@unique([productId])
  @@map("stock")
}

enum ShipmentStatusType {
  CREATED
  PENDING
  COMPLETED
}

model Shipment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  status ShipmentStatusType?

  order   Order?  @relation(name: "Shipment_order", fields: [orderId], references: [id])
  orderId String?

  from_Order_shipment Order[] @relation(name: "Order_shipment")

  @@unique([orderId])
  @@map("shipments")
}
