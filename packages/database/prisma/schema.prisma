// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

model Address {
  id                String    @id @default(cuid())
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @default(now()) @updatedAt
  addressLine1      String
  addressLine2      String?
  country           String
  isBillingAddress  Boolean?
  isPrimaryAddress  Boolean
  isShippingAddress Boolean?
  isValidAddress    Boolean?
  municipality      String
  poBox             Boolean?
  postalCode        String
  region            String

  user              User?   @relation("Address_user", fields: [userId], references: [id])
  userId            String? @map("user")
  from_User_address User[]  @relation("User_address")

  @@index([userId])
}

enum ContactType {
  PHONE
  EMAIL
  TEXT
}

model User {
  id                     String          @id @default(cuid())
  createAt               DateTime        @default(now())
  updatedAt              DateTime?       @updatedAt
  address                Address[]       @relation("User_address")
  citizenship            String
  email                  String          @unique
  password               String
  phone                  String?         @unique
  firstName              String
  middleName             String?
  lastName               String
  preferredContactMethod ContactType     @default(EMAIL)
  preferredLanguage      String
  // guid                   String          @unique @default(cuid())
  role                   Role?           @default(CUSTOMER)
  reviews                ProductRating[]

  from_Address_user      Address[]  @relation("Address_user")
  from_Cart_user         Cart[]     @relation("Cart_user")
  from_Order_user        Order[]    @relation("Order_user")
  from_Order_employee    Order[]    @relation("Order_employee")
  from_Shipment_employee Shipment[] @relation("Shipment_employee")
}

model Cart {
  id           String        @id @default(cuid())
  user         User?         @relation("Cart_user", fields: [userId], references: [id])
  userId       String?       @map("user")
  products     CartProduct[] @relation("Cart_products")
  lastModified DateTime?     @default(now()) @updatedAt
  sum          Decimal       @default("0") // @postgresql.Decimal(18, 4)

  @@index([userId])
}

model CartProduct {
  id                 String   @id @default(cuid())
  product            Product? @relation("CartProduct_product", fields: [productId], references: [id])
  productId          String?  @map("product")
  amount             Int      @default(0)
  from_Cart_products Cart[]   @relation("Cart_products")

  @@index([productId])
}

model Order {
  id                  String           @id @default(cuid())
  createdAt           DateTime?        @default(now())
  updatedAt           DateTime?        @default(now()) @updatedAt
  user                User?            @relation("Order_user", fields: [userId], references: [id])
  userId              String?          @map("user")
  products            Json?
  payment             Payment?         @relation("Order_payment", fields: [paymentId], references: [id])
  paymentId           String?          @map("payment")
  shipment            Shipment?        @relation("Order_shipment", fields: [shipmentId], references: [id])
  shipmentId          String?          @map("shipment")
  employee            User?            @relation("Order_employee", fields: [employeeId], references: [id])
  employeeId          String?          @map("employee")
  status              OrderStatusType?
  from_Payment_order  Payment[]        @relation("Payment_order")
  from_Shipment_order Shipment[]       @relation("Shipment_order")

  @@index([userId])
  @@index([paymentId])
  @@index([shipmentId])
  @@index([employeeId])
}

enum ImageFileType {
  PNG
  JPG
  WEBP
}

enum ImageFormat {
  LANDSCAPE
  PORTRAIT
  SQUARE
}

model ProductImage {
  id                  String         @id @default(cuid())
  createAt            DateTime?      @default(now())
  updatedAt           DateTime?      @default(now()) @updatedAt
  altText             String?
  aspectRatio         String?
  captionText         String?
  code                String
  contentType         String? // i.e., "image/png", "image/jpg", etc.
  fileType            ImageFileType
  format              ImageFormat
  height              Int
  width               Int
  url                 String         @unique
  variantId           String?
  variant             ProductImage?  @relation("ProductImage_variants", fields: [variantId], references: [id])
  variants            ProductImage[] @relation("ProductImage_variants")
  from_Product_images Product[]      @relation("Product_images")
}

enum ProductStatus {
  AVAILABLE
  BACKORDER
  DISCONTINUED
  OUT_OF_STOCK
}

model ProductVariant {
  id        String    @id @default(cuid())
  createAt  DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  active    Boolean?
  code      String?
  color     String?
  name      String
  imageUrl  String?
  url       String?
}

model Price {
  id              String    @id @default(cuid())
  createAt        DateTime? @default(now())
  updatedAt       DateTime? @default(now()) @updatedAt
  code            String?
  value           Int
  formattedValue  String
  isoCurrencyCode String
  regularValue    Int
}

model Category {
  id                      String     @id @default(cuid())
  createAt                DateTime?  @default(now())
  updatedAt               DateTime?  @default(now()) @updatedAt
  code                    String
  name                    String     @unique
  // image                   ProductImage  @relation("Category_image")
  url                     String
  parent                  Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId                String?    @map("parent")
  products                Product[]  @relation("Category_products") // Product_category
  from_Product_categories Product[]  @relation("Product_categories")
  // from_Product_images     Product[]     @relation("Product_images")
  from_Category_parent    Category[] @relation("Category_parent")
  // ProductImage            ProductImage? @relation(fields: [productImageId], references: [id])
  // productImageId          String?

  @@index([parentId])
}

model ProductRating {
  id                  String    @id @default(cuid())
  createAt            DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  label               String
  rating              Int
  review              String?
  user                User      @relation(fields: [userId], references: [id])
  userId              String
  // from_Product_rating Product?   @relation("Product_rating", fields: [productId], references: [id])
  from_Product_rating Product[] @relation("Product_rating")
}

model Product {
  id                       String         @id @default(cuid())
  createdAt                DateTime?      @default(now())
  updatedAt                DateTime?      @default(now()) @updatedAt
  code                     String
  description              Json           @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  categories               Category[]     @relation("Product_categories")
  images                   ProductImage[] @relation("Product_images")
  price                    Decimal?       @db.Decimal(18, 4)
  rating                   ProductRating? @relation("Product_rating", fields: [ratingId], references: [id])
  ratingId                 String?
  stock                    Stock?         @relation("Product_stock", fields: [stockId], references: [id])
  stockId                  String?        @map("stock")
  from_CartProduct_product CartProduct[]  @relation("CartProduct_product")
  from_Category_products   Category[]     @relation("Category_products")

  @@index([stockId])
}

model Stock {
  id                   String    @id @default(cuid())
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @default(now()) @updatedAt
  stock                Int?
  nextDelivery         DateTime?
  amountInNextDelivery Int?
  from_Product_stock   Product[] @relation("Product_stock")
}

model Payment {
  id                 String             @id @default(cuid())
  createdAt          DateTime?          @default(now())
  updatedAt          DateTime?          @default(now()) @updatedAt
  order              Order?             @relation("Payment_order", fields: [orderId], references: [id])
  orderId            String?            @map("order")
  total              Decimal?           @db.Decimal(18, 4)
  formattedValue     String
  isoCurrencyCode    String             @default("")
  subtotal           Decimal?           @db.Decimal(18, 4)
  externalId         String             @default("")
  status             PaymentStatusType?
  from_Order_payment Order[]            @relation("Order_payment")

  @@index([orderId])
}

model Shipment {
  id                  String              @id @default(cuid())
  createdAt           DateTime?           @default(now())
  lastModification    DateTime?           @default(now()) @updatedAt
  status              ShipmentStatusType?
  externalId          String              @default("")
  order               Order?              @relation("Shipment_order", fields: [orderId], references: [id])
  orderId             String?             @map("order")
  employee            User?               @relation("Shipment_employee", fields: [employeeId], references: [id])
  employeeId          String?             @map("employee")
  from_Order_shipment Order[]             @relation("Order_shipment")

  @@index([orderId])
  @@index([employeeId])
}

enum OrderStatusType {
  CREATED
  PENDING
  SUCCESSFUL
  CANCELLED
}

enum PaymentStatusType {
  CREATED
  PENDING
  COMPLETED
}

enum ShipmentStatusType {
  CREATED
  PENDING
  COMPLETED
}

// model ProductCategory {
//   product    Product  @relation(fields: [productId], references: [id])
//   productId  Int
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId Int

//   @@id([productId, categoryId])
// }
