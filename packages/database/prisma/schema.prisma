// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Customer ID is only set when the user signs up for membership
  customerId        String? @unique
  email             String  @unique
  password          String
  phone             String?
  firstName         String
  middleName        String?
  lastName          String
  preferredLanguage String? @default("en")
  role              Role?   @default(CUSTOMER)

  // Relations
  address     Address[] // @relation(name: "Address_user")
  cart        Cart? // @relation(name: "Cart_user")
  orders      Order[] // @relation(name: "Order_user")
  profile     Profile? // @relation(name: "Profile_user")
  session     ShoppingSession?
  UserPayment UserPayment[]

  @@map("users")
}

model UserPayment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  paymentMethod String
  provider      String
  accountNo     Int
  expiry        DateTime

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("user_payments")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  avatar         Json?
  gender         Gender?
  productReviews Review[]
  username       String   @unique // A default will be generated by extracting user name from email with random numbers 

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("profiles")
}

model Address {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  addressLine1      String
  addressLine2      String?
  municipality      String
  region            String
  country           String
  postalCode        String
  isBillingAddress  Boolean?
  isPrimaryAddress  Boolean?
  isShippingAddress Boolean?
  isValidAddress    Boolean?
  poBox             Boolean?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("addresses")
}

enum ContactType {
  PHONE
  EMAIL
  TEXT
}

model ShoppingSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  total Decimal @default(0)

  // Relations
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?       @unique
  CartProduct CartProduct[]

  @@map("shopping_sessions")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  code        String?
  description Json?   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  name        String
  path        String /// URI path

  // Relations
  parent               Category?  @relation(name: "Category_parent", fields: [parentId], references: [id])
  parentId             Int?
  from_Category_parent Category[] @relation(name: "Category_parent")
  products             Product[]
  // products             ProductCategories[] // @relation(name: "Category_products")

  @@unique([name, parentId])
  @@map("categories")
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products CartProduct[] @relation(name: "Cart_products")
  user     User          @relation(fields: [userId], references: [id])
  userId   String        @unique

  @@map("cart")
}

model CartProduct {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quantity Int @default(0)

  // Relations
  product            ProductVariant?  @relation(name: "CartProduct_product", fields: [productId], references: [id])
  productId          String?
  from_Cart_products Cart[]           @relation(name: "Cart_products")
  session            ShoppingSession? @relation(fields: [sessionId], references: [id])
  sessionId          Int?

  @@unique([productId])
  @@map("cart_products")
}

enum OrderStatusType {
  CREATED
  PENDING
  SUCCESSFUL
  CANCELLED
}

model Order {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  // Relations
  items     OrderDetail[]
  status    OrderStatusType?
  discounts Discount[]
  shipping  Shipping?
  payment   Payment?         @relation(fields: [paymentId], references: [id])
  paymentId Int?             @unique
  user      User?            @relation(fields: [userId], references: [id])
  userId    String?          @unique

  @@map("orders")
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  quantity Int   @default(0)
  total    Float

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([orderId, productId])
  @@map("order_details")
}

enum PaymentStatusType {
  CREATED
  PENDING
  COMPLETED
}

model Payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  order    Order?
  provider String // i.e., Visa, PayPal, etc.
  status   PaymentStatusType?
  total    Decimal            @default(0)

  @@map("payments")
}

model Discount {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  expiresOn DateTime?

  active      Boolean
  description Json?
  name        String
  percentage  Decimal

  // Relations
  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?

  @@map("discounts")
}

model Price {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  isoCurrencyCode String?        @default("USD")
  currentPrice    Decimal
  formattedValue  String
  fullPrice       Decimal
  product         VariantOption? // @relation(fields: [productVariantId], references: [id])

  @@map("prices")
}

enum ImageFormat {
  LANDSCAPE
  PORTRAIT
  SQUARE
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  altText  String?
  resource Json
  format   ImageFormat?

  // Relations
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?

  @@map("product_images")
}

model Swatch {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  code  String? // e.g., 'B' for blue, 'Bl' for black, used for generating SKU
  name  String
  hex   String?
  image Json? // { "src": "https://...", "width": 80, "height": 55, "alt": "red" }

  // Relations
  variant ProductVariant?

  @@map("swatches")
}

model VariantOption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  SKU            String         @unique
  size           String?
  inseam         String?
  waist          String?
  stock          Stock?
  price          Price?         @relation(fields: [priceId], references: [id])
  priceId        Int?           @unique
  productVariant ProductVariant @relation(fields: [variantId], references: [id])
  variantId      String

  @@unique([variantId, SKU])
  @@map("variant_options")
}

model ProductVariant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Only one swatch for a product can have active as true, this determines
  // the default product variant to show
  active    Boolean?
  name      String
  sortOrder Int?
  status    ProductStatusType
  size      String[]
  inseam    String[]
  waist     String[]
  images    ProductImage[]

  // Relations
  product                  Product?        @relation(fields: [productId], references: [id])
  productId                String?
  options                  VariantOption[]
  swatch                   Swatch          @relation(fields: [swatchId], references: [id])
  swatchId                 Int             @unique
  //
  from_CartProduct_product CartProduct[]   @relation(name: "CartProduct_product")

  @@unique([id, productId])
  @@map("product_variants")
}

enum ProductStatusType {
  AVAILABLE
  BACKORDER
  DISCONTINUED
  OUT_OF_STOCK
  UNAVAILABLE
}

model Brand {
  id   Int    @default(autoincrement())
  name String @unique

  products Product[]

  @@map("brands")
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Brand       Brand?   @relation(fields: [brand], references: [name])
  brand       String?
  brandName   String?
  code        String? // allows concatenating of categories and ids
  description Json     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  name        String
  rating      Float?   @default(0)
  uid         String   @unique
  userReviews Review[]

  // Relations
  categories Category[]
  orders     OrderDetail[]
  variants   ProductVariant[]

  @@map("products")
}

// model ProductCategories {
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId Int
//   product    Product  @relation(fields: [productId], references: [id])
//   productId  String
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([categoryId, productId])
//   @@map("product_categories")
// }

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  label   String
  rating  Int
  comment String?

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  @@unique([productId, profileId])
  @@map("reviews")
}

enum StockStatus {
  IN_STOCK
  IN_TRANSIT
  NO_LONGER_SOLD
  NONE
  ON_ORDER
}

model Stock {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  code                 String? // This should be the concatenated product variant ID and product option value
  quantity             Int
  // for Advance Shipment Notice (ASN)
  nextDelivery         DateTime?
  nextDeliveryQuantity Int?
  status               StockStatus?

  productVariant VariantOption? @relation(fields: [variantId, variantSku], references: [variantId, SKU])
  variantId      String?
  variantSku     String?

  @@unique([variantId, variantSku])
  @@map("inventory")
}

enum ShippingStatusType {
  CREATED
  PENDING
  COMPLETED
}

model ShippingOption {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String // e.g., '2-Day Air', 'Ground', 'Standard', etc.

  // Relations
  provider   ShippingProvider @relation(fields: [providerId], references: [id])
  providerId Int
  shipment   Shipping[]

  @@id([providerId, name])
  @@map("shipping_options")
}

model ShippingProvider {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  name      String
  accountId String
  options   ShippingOption[]
  shipments Shipping[]

  @@map("shipping_providers")
}

model Shipping {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  status         ShippingStatusType?
  shippingOption ShippingOption?     @relation(fields: [providerId, shipmentMethod], references: [providerId, name])
  shipmentMethod String?

  order      Order            @relation(fields: [orderId], references: [id])
  orderId    Int              @unique
  provider   ShippingProvider @relation(fields: [providerId], references: [id])
  providerId Int              @unique

  @@map("shipping")
}
